package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"GoExpertPostGrad-Orders-Challenge/internal/infra/graphql/graph/model"
	"GoExpertPostGrad-Orders-Challenge/internal/usecase"
	"context"
	"log"
)

var cacheKey = "orders"

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, order *model.OrderInput) (*model.Order, error) {
	dto := usecase.OrderInputDTO{
		Name:  order.Name,
		Price: order.Price,
		Tax:   order.Tax,
	}

	output, err := r.OrderCreationUseCase.Execute(dto)
	if err != nil {
		return nil, err
	}

	// Clear cache to ensure consistency
	r.OrderListingUseCase.Cache.Delete(cacheKey)

	return &model.Order{
		ID:         output.ID,
		Name:       output.Name,
		Price:      output.Price,
		Tax:        output.Tax,
		FinalPrice: output.FinalPrice,
	}, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	output, err := r.OrderListingUseCase.Execute()
	if err != nil {
		log.Printf("Failed to list orders: %v", err)
		return nil, err
	}

	var orders []*model.Order
	for _, order := range output.Orders {
		orders = append(orders, &model.Order{
			ID:         order.ID,
			Name:       order.Name,
			Price:      order.Price,
			Tax:        order.Tax,
			FinalPrice: order.FinalPrice,
		})
	}

	return orders, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
